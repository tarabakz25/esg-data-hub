'use client';

import React from 'react';

export interface CategoryProgressProps {
  category: string;
  score: number; // 0-100
  requiredKPIs: string[];
  mappedKPIs: string[];
  missingKPIs: string[];
  isLoading?: boolean;
}

export default function CategoryProgress({
  category,
  score,
  requiredKPIs,
  mappedKPIs,
  missingKPIs,
  isLoading = false
}: CategoryProgressProps) {
  if (isLoading) {
    return (
      <div className="animate-pulse">
        <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
        <div className="h-6 bg-gray-200 rounded mb-2"></div>
        <div className="h-3 bg-gray-200 rounded w-3/4"></div>
      </div>
    );
  }

  // „Ç´„ÉÜ„Ç¥„É™„Ç¢„Ç§„Ç≥„É≥„ÅÆÂèñÂæó
  const getCategoryIcon = (category: string): string => {
    switch (category) {
      case 'Environment':
        return 'üå±';
      case 'Social':
        return 'üë•';
      case 'Governance':
        return '‚öñÔ∏è';
      case 'Financial':
        return 'üí∞';
      default:
        return 'üìä';
    }
  };

  // „Ç´„ÉÜ„Ç¥„É™Âêç„ÅÆÊó•Êú¨Ë™ûÂåñ
  const getCategoryName = (category: string): string => {
    switch (category) {
      case 'Environment':
        return 'Áí∞Â¢É';
      case 'Social':
        return 'Á§æ‰ºö';
      case 'Governance':
        return '„Ç¨„Éê„Éä„É≥„Çπ';
      case 'Financial':
        return 'Ë≤°Âãô';
      default:
        return category;
    }
  };

  // „Çπ„Ç≥„Ç¢„Å´Âü∫„Å•„ÅèËâ≤„ÅÆÂèñÂæó
  const getScoreColor = (score: number): string => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÅÆËâ≤„ÅÆÂèñÂæó
  const getProgressColor = (score: number): string => {
    if (score >= 80) return 'bg-green-500';
    if (score >= 60) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  // „Çπ„ÉÜ„Éº„Çø„Çπ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂèñÂæó
  const getStatusMessage = (score: number): string => {
    if (score >= 80) return 'ÂÑ™ÁßÄ„Å™„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπÁä∂Ê≥Å„Åß„Åô';
    if (score >= 60) return 'ËâØÂ•Ω„Åß„Åô„ÅåÊîπÂñÑ„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çä„Åæ„Åô';
    return 'ÈáçË¶Å„Å™ÊîπÂñÑ„ÅåÂøÖË¶Å„Åß„Åô';
  };

  const completionRate = requiredKPIs.length > 0 ? 
    (mappedKPIs.length / requiredKPIs.length) * 100 : 0;

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4 space-y-4">
      {/* „Ç´„ÉÜ„Ç¥„É™„Éò„ÉÉ„ÉÄ„Éº */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <span className="text-2xl">{getCategoryIcon(category)}</span>
          <h3 className="text-lg font-semibold text-gray-900">
            {getCategoryName(category)}
          </h3>
        </div>
        <div className={`text-2xl font-bold ${getScoreColor(score)}`}>
          {score.toFixed(1)}%
        </div>
      </div>

      {/* „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº */}
      <div className="space-y-2">
        <div className="flex justify-between text-sm text-gray-600">
          <span>ÂÖÖË∂≥Áéá</span>
          <span>{mappedKPIs.length}/{requiredKPIs.length} KPI</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className={`h-3 rounded-full transition-all duration-300 ${getProgressColor(score)}`}
            style={{ width: `${Math.min(score, 100)}%` }}
          />
        </div>
        <div className="text-xs text-gray-500">
          {getStatusMessage(score)}
        </div>
      </div>

      {/* KPIË©≥Á¥∞ */}
      <div className="space-y-3">
        {/* „Éû„ÉÉ„Éî„É≥„Ç∞Ê∏à„ÅøKPI */}
        {mappedKPIs.length > 0 && (
          <div>
            <h4 className="text-sm font-medium text-green-700 mb-2">
              ‚úÖ „Éû„ÉÉ„Éî„É≥„Ç∞Ê∏à„Åø ({mappedKPIs.length}‰ª∂)
            </h4>
            <div className="space-y-1">
              {mappedKPIs.slice(0, 3).map((kpi, index) => (
                <div key={index} className="text-sm text-gray-600 bg-green-50 rounded px-2 py-1">
                  {kpi}
                </div>
              ))}
              {mappedKPIs.length > 3 && (
                <div className="text-xs text-gray-500">
                  ...‰ªñ {mappedKPIs.length - 3}‰ª∂
                </div>
              )}
            </div>
          </div>
        )}

        {/* Ê¨†ÊêçKPI */}
        {missingKPIs.length > 0 && (
          <div>
            <h4 className="text-sm font-medium text-red-700 mb-2">
              ‚ùå Ê¨†ÊêçKPI ({missingKPIs.length}‰ª∂)
            </h4>
            <div className="space-y-1">
              {missingKPIs.slice(0, 3).map((kpi, index) => (
                <div key={index} className="text-sm text-gray-600 bg-red-50 rounded px-2 py-1">
                  {kpi}
                </div>
              ))}
              {missingKPIs.length > 3 && (
                <div className="text-xs text-gray-500">
                  ...‰ªñ {missingKPIs.length - 3}‰ª∂
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éí„É≥„Éà */}
      {missingKPIs.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded p-3">
          <div className="text-sm text-blue-800">
            <span className="font-medium">Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥:</span>
            <div className="mt-1">
              {missingKPIs.length <= 2 ? 
                `${missingKPIs.join('„ÄÅ')}„ÅÆ„Éá„Éº„ÇøÂèéÈõÜ„ÇíÂÑ™ÂÖà„Åó„Å¶„Åè„Å†„Åï„ÅÑ` :
                `${missingKPIs.slice(0, 2).join('„ÄÅ')}„Å™„Å©${missingKPIs.length}‰ª∂„ÅÆKPI„Éá„Éº„ÇøÂèéÈõÜ„ÅåÂøÖË¶Å„Åß„Åô`
              }
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 