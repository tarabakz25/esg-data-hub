generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Kpi {
  id        String     @id
  name      String
  unit      String
  createdAt DateTime   @default(now())
  data      Data[]
  values    KPIValue[]
}

model Data {
  id        Int           @id @default(autoincrement())
  kpiId     String
  period    DateTime
  value     Float
  sourceId  Int
  createdAt DateTime      @default(now())
  kpi       Kpi           @relation(fields: [kpiId], references: [id])
  source    Source        @relation(fields: [sourceId], references: [id])
  versions  DataVersion[]

  @@unique([kpiId, period])
}

model DataVersion {
  id        Int      @id @default(autoincrement())
  dataId    Int
  checksum  String
  diff      Json
  userId    Int
  isCurrent Boolean  @default(false)
  createdAt DateTime @default(now())
  data      Data     @relation(fields: [dataId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

/// ------------  Ingest 用テーブル ------------
model Source {
  id         Int       @id @default(autoincrement())
  uri        String    @unique
  uploaderId Int
  uploadedAt DateTime  @default(now())
  data       Data[]
  rows       DataRow[]
  uploader   User      @relation(fields: [uploaderId], references: [id])
  uploads    Upload[]
}

model Upload {
  id               Int               @id @default(autoincrement())
  filename         String
  s3Key            String            @unique
  status           UploadStatus      @default(parsed)
  userId           Int
  createdAt        DateTime          @default(now())
  sourceId         Int?
  rows             DataRow[]
  source           Source?           @relation(fields: [sourceId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  csv_file_history csv_file_history?
}

model DataRow {
  id        Int                    @id @default(autoincrement())
  uploadId  Int
  lineNo    Int
  raw       Json
  checksum  String
  embedding Unsupported("vector")?
  createdAt DateTime               @default(now())
  sourceId  Int?
  source    Source?                @relation(fields: [sourceId], references: [id])
  upload    Upload                 @relation(fields: [uploadId], references: [id])
  values    KPIValue[]
}

model KPIValue {
  id        Int      @id @default(autoincrement())
  kpiId     String
  dataRowId Int
  period    DateTime
  value     Float
  unit      String?
  dataRow   DataRow  @relation(fields: [dataRowId], references: [id])
  kpi       Kpi      @relation(fields: [kpiId], references: [id])

  @@unique([kpiId, period, dataRowId])
}

/// ------------ コンプライアンスチェック用テーブル ------------
model ComplianceCheckResult {
  id              String           @id @default(cuid())
  period          String
  standard        String
  checkedAt       DateTime         @default(now())
  totalKpis       Int
  criticalMissing Int
  warningMissing  Int
  complianceRate  Float
  status          ComplianceStatus
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  missingKpis     MissingKpi[]
  notifications   Notification[]

  @@unique([period, standard])
}

model MissingKpi {
  id                      Int                   @id @default(autoincrement())
  complianceCheckResultId String
  kpiId                   String
  kpiName                 String
  category                String
  severity                ComplianceSeverity
  expectedUnit            String
  lastUpdated             DateTime?
  createdAt               DateTime              @default(now())
  complianceCheckResult   ComplianceCheckResult @relation(fields: [complianceCheckResultId], references: [id], onDelete: Cascade)

  @@unique([complianceCheckResultId, kpiId])
}

/// ------------ 通知システム用テーブル ------------
model Notification {
  id                      String                 @id @default(cuid())
  type                    NotificationType
  priority                NotificationPriority
  title                   String
  message                 String
  severity                ComplianceSeverity?
  isRead                  Boolean                @default(false)
  actionUrl               String?
  complianceCheckResultId String?
  userId                  Int?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  complianceCheckResult   ComplianceCheckResult? @relation(fields: [complianceCheckResultId], references: [id], onDelete: Cascade)
  user                    User?                  @relation(fields: [userId], references: [id])

  @@index([isRead, createdAt])
  @@index([userId, isRead])
}

/// ------------  ユーザー関連 ------------
model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  password      String?
  role          String         @default("viewer")
  department    String?
  createdAt     DateTime       @default(now())
  dataVersions  DataVersion[]
  notifications Notification[]
  sources       Source[]
  uploads       Upload[]
}

/// ------------ 監査証跡用テーブル ------------
model auditTrail {
  id         BigInt   @id @default(autoincrement())
  tableName  String
  recordId   BigInt
  action     String
  payloadHash String
  prevHash   String?
  userId     String
  ipAddress  String
  createdAt  DateTime @default(now())

  @@index([tableName, recordId])
}

/// ------------ 正規化レコード用テーブル ------------
model normalizedRecord {
  id             Int     @id @default(autoincrement())
  dataRecordId   BigInt
  kpiId          Int
  normalizedValue String
  originalValue  String
  createdAt      DateTime @default(now())

  @@unique([dataRecordId, kpiId])
}

model csv_file_history {
  id                Int                 @id @default(autoincrement())
  uploadId          Int                 @unique
  filename          String
  uploadedAt        DateTime            @default(now())
  processingStatus  ProcessingStatus    @default(PENDING)
  detectedKpis      Int                 @default(0)
  processedRecords  Int                 @default(0)
  mappingResults    Json?
  analysisResults   Json?
  complianceImpact  Json?
  processingTimeMs  Int?
  errorDetails      String?
  Upload            Upload              @relation(fields: [uploadId], references: [id])
  kpi_contributions kpi_contributions[]
}

model cumulative_kpis {
  id                       Int                      @id @default(autoincrement())
  standardKpiId            String                   @unique
  standardKpiName          String
  cumulativeValue          Decimal
  unit                     String
  lastUpdated              DateTime                 @default(now())
  recordCount              Int                      @default(0)
  contributingFileIds      Int[]
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime
  standard_kpi_definitions standard_kpi_definitions @relation(fields: [standardKpiId], references: [id])
  kpi_contributions        kpi_contributions[]
}

model kpi_contributions {
  id               Int              @id @default(autoincrement())
  cumulativeKpiId  Int
  csvFileHistoryId Int
  contributedValue Decimal
  recordCount      Int
  confidence       Float
  mappingDetails   Json?
  createdAt        DateTime         @default(now())
  csv_file_history csv_file_history @relation(fields: [csvFileHistoryId], references: [id])
  cumulative_kpis  cumulative_kpis  @relation(fields: [cumulativeKpiId], references: [id])

  @@unique([cumulativeKpiId, csvFileHistoryId])
}

model standard_kpi_definitions {
  id              String           @id
  name            String
  category        String
  description     String?
  preferredUnit   String
  aliases         String[]
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  cumulative_kpis cumulative_kpis?
}

/// ------------ ENUM ------------
enum UploadStatus {
  parsed
  errored
}

enum ComplianceStatus {
  compliant
  warning
  critical
}

enum ComplianceSeverity {
  critical
  warning
}

enum NotificationType {
  compliance_missing
  compliance_warning
  system_alert
}

enum NotificationPriority {
  high
  medium
  low
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}
